opcode         name                 target                    args                      kwargs
-------------  -------------------  ------------------------  ------------------------  ---------------------------------------------------
placeholder    arg0                 arg0                      ()                        {}
call_function  sym_size             aten.sym_size             (arg0, 0)                 {}
call_function  mul                  <built-in function mul>   (sym_size, 2)             {}
call_function  empty_memory_format  aten.empty.memory_format  ([mul],)                  {'device': device(type='cpu'), 'pin_memory': False}
output         output               output                    ([empty_memory_format],)  {}

class GraphModule(torch.nn.Module):
    def forward(self, orig_arg_0):
        arg0: f32[s0, s0], = fx_pytree.tree_flatten_spec([orig_arg_0], self._in_spec)
        # File: /scratch/bahuang/work/repos/pytorch/example_symint.py:16, code: a =  torch.empty(x.shape[0] * 2)
        sym_size = torch.ops.aten.sym_size(arg0, 0);  arg0 = None

        # No stacktrace found for following nodes
        mul = sym_size * 2;  sym_size = None

        # File: /scratch/bahuang/work/repos/pytorch/example_symint.py:16, code: a =  torch.empty(x.shape[0] * 2)
        empty_memory_format = torch.ops.aten.empty.memory_format([mul], device = device(type='cpu'), pin_memory = False);  mul = None
        return pytree.tree_unflatten([empty_memory_format], self._out_spec)

torch.export.export_schema.GraphModule(
    name='GraphModule',
    graph=torch.export.export_schema.Graph(
        inputs=[
            torch.export.export_schema.Node(
                op='placeholder',
                target='arg0',
                args=[],
                kwargs={},
                outputs=[
                    torch.export.export_schema.TensorArgument(name='arg0')
                ],
                metadata='Skipped'
            )
        ],
        output=torch.export.export_schema.Node(
            op='output',
            target='output',
            args=[
                torch.export.export_schema.TensorArgument(
                    name='empty_memory_format'
                )
            ],
            kwargs={},
            outputs=[
                torch.export.export_schema.TensorArgument(
                    name='empty_memory_format'
                )
            ],
            metadata='Skipped'
        ),
        nodes=[
            torch.export.export_schema.Node(
                op='call_function',
                target='aten.sym_size',
                args=[
                    torch.export.export_schema.TensorArgument(name='arg0'),
                    0
                ],
                kwargs={},
                outputs=[
                    torch.export.export_schema.SymIntArgument(name='sym_size')
                ],
                metadata='Skipped'
            ),
            torch.export.export_schema.Node(
                op='call_function',
                target='<built-in function mul>',
                args=[
                    torch.export.export_schema.SymIntArgument(name='sym_size'),
                    2
                ],
                kwargs={},
                outputs=[
                    torch.export.export_schema.SymIntArgument(name='mul')
                ],
                metadata='Skipped'
            ),
            torch.export.export_schema.Node(
                op='call_function',
                target='aten.empty.memory_format',
                args=[[torch.export.export_schema.SymIntArgument(name='mul')]],
                kwargs={
                    'device': torch.export.export_schema.Device(
                        type='cpu',
                        index=None
                    ),
                    'pin_memory': False
                },
                outputs=[
                    torch.export.export_schema.TensorArgument(
                        name='empty_memory_format'
                    )
                ],
                metadata='Skipped'
            )
        ],
        ivalues=[
            torch.export.export_schema.IValue(
                name='arg0',
                meta=torch.export.export_schema.TensorMeta(
                    dtype=torch.float32,
                    sizes=torch.Size((s0, s0)),
                    requires_grad=False,
                    device=device(type='cpu'),
                    strides=(s0, 1),
                    storage_offset=0,
                    layout=torch.strided
                )
            ),
            torch.export.export_schema.IValue(
                name='empty_memory_format',
                meta=None
            )
        ],
        symint_values={'sym_size': 4, 'mul': 8}
    ),
    metadata={},
    parameters='Skipped',
    buffers='Skipped'
)
